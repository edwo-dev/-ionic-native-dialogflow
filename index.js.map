{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/dialogflow/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4DF,8BAAiB;;;;IAE/C;;;OAGG;;;;;IAEH,yCAAoB;;;;;QAClB,MAAM,CAAC,IAAI,CAAC;KACb;IAED;;;;OAIG;;;;;;IAEH,8BAAS;;;;;cAAC,MAA+B;QACvC,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,mCAAc;;;;;QACZ,MAAM,CAAC;KACR;IAED;;OAEG;;;;IAEH,kCAAa;;;;QACX,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,iCAAY;;;;;QACV,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAIH,mCAAc;;;;;QACZ,MAAM,CAAC;KACR;IAED;;OAEG;;;;IAEH,kCAAa;;;;QACX,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,yCAAoB;;;;;cAAC,IAAY;QAC/B,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,0CAAqB;;;;;cAAC,KAAa;QACjC,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,iCAAY;;;;;QACV,MAAM,CAAC;KACR;;gBA9FF,UAAU;;;QAOR,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;0DAGvB;;QAOA,OAAO,EAAE;;;;+CAGT;;QAMA,OAAO,EAAE;;;;oDAGT;;QAKA,OAAO,EAAE;;;;mDAGT;;QAMA,OAAO,EAAE;;;;kDAGT;;QAMA,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCACgB,UAAU;oDAE3B;;QAKA,OAAO,EAAE;;;;mDAGT;;QAOA,OAAO,EAAE;;;;0DAGT;;QAOA,OAAO,EAAE;;;;2DAGT;;QAMA,OAAO,EAAE;;;;kDAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA7FU,UAAU;QAVtB,MAAM,CAAC;YACN,UAAU,EAAE,YAAY;YACxB,MAAM,EAAE,2BAA2B;;YACnC,SAAS,EAAE,4BAA4B;;YACvC,IAAI,EAAE,qEAAqE;;YAC3E,OAAO,EAAE,EAAE;;YACX,gBAAgB,EAAE,EAAE;;YACpB,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,UAAU,EA+FtB;qBA7JD;EA8DgC,iBAAiB;SAApC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\nexport interface DialogflowConfiguration {\n  credentials: string;\n  projectId?: string;\n  sessionId?: string;\n  languageCode?: string;\n  audioEncoding?: string;\n  sampleRate?: number;\n  bufferSize?: number;\n}\n\nexport interface DetectIntentResponse {\n  responseId: string;\n  queryResult: any;\n}\n\nexport interface StreamingDetectIntentResponse {\n  responseId: string;\n  recognitionResult: any;\n  queryResult: any;\n}\n\n/**\n * @name Dialogflow\n * @description\n * This plugin does something\n *\n * @usage\n * ```typescript\n * import { Dialogflow } from '@ionic-native/dialogflow';\n *\n *\n * constructor(private dialogflow: Dialogflow) { }\n *\n * ...\n *\n * let config: DialogflowConfiguration;\n * this.dialogflow.init(config)\n *   .then(() => console.log('Initialized'))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n *\n * @interfaces\n * DetectIntentResponse\n *\n * @interfaces\n * StreamingDetectIntentResponse\n */\n@Plugin({\n  pluginName: 'Dialogflow',\n  plugin: 'cordova-plugin-dialogflow', // npm package name, example: cordova-plugin-camera\n  pluginRef: 'cordova.plugins.Dialogflow', // the variable reference to call the plugin, example: navigator.geolocation\n  repo: 'https://betacut@bitbucket.org/betacut/cordova-plugin-dialogflow.git', // the github repository URL for the plugin\n  install: '', // OPTIONAL install command, in case the plugin requires variables\n  installVariables: [], // OPTIONAL the plugin requires variables\n  platforms: ['iOS'] // Array of platforms supported, example: ['Android', 'iOS']\n})\n@Injectable()\nexport class Dialogflow extends IonicNativePlugin {\n\n  /**\n   * Returns that plugin has streaming support.\n   * @return {boolean} Returns that plugin has streaming support.\n   */\n  @Cordova({ sync: true })\n  isStreamingAvailable(): boolean {\n    return true;\n  }\n\n  /**\n   * Configures dialogflow.\n   * @param {DialogflowConfiguration} config Dialogflow configuration options.\n   * @return {Promise<void>} Returns a promise that resolves when plugin was initialized.\n   */\n  @Cordova()\n  configure(config: DialogflowConfiguration): Promise<void> {\n    return;\n  }\n\n  /**\n   * Starts recording microphone input.\n   * @return {Promise<void>} Returns a promise that resolves after recording was started.\n   */\n  @Cordova()\n  startRecording(): Promise<void> {\n    return;\n  }\n\n  /**\n   * Stops recording microphone input.\n   */\n  @Cordova()\n  stopRecording(): void {\n    return;\n  }\n\n  /**\n   * Gets the audio recording as base64 string.\n   * @return {Promise<string>} Returns a promise that resolves after audio recording was converted into base64 string.\n   */\n  @Cordova()\n  getRecording(): Promise<string> {\n    return;\n  }\n\n  /**\n   * Starts listening to microphone input.\n   * @return {Observable<StreamingDetectIntentResponse>} Returns a observable containing streaming detect intent response.\n   */\n  @Cordova({\n    observable: true\n  })\n  startListening(): Observable<StreamingDetectIntentResponse> {\n    return;\n  }\n\n  /**\n   * Stops listening to microphone input.\n   */\n  @Cordova()\n  stopListening(): void {\n    return;\n  }\n\n  /**\n   * Detects intent from a text string.\n   * @param {string} text Text input containing intent.\n   * @return {Promise<DetectIntentResponse>} Returns a promise containing detect intent response.\n   */\n  @Cordova()\n  detectIntentFromText(text: string): Promise<DetectIntentResponse> {\n    return;\n  }\n\n  /**\n   * Detects intent from an audio base64 encoded string.\n   * @param {string} Audio input containing intent.\n   * @return {Promise<DetectIntentResponse>} Returns a promise containing detect intent response.\n   */\n  @Cordova()\n  detectIntentFromAudio(audio: string): Promise<DetectIntentResponse> {\n    return;\n  }\n\n  /**\n   * Deletes all active contexts in the current session.\n   * @return {Promise<void>} Returns an empty promise.\n   */\n  @Cordova()\n  resetSession(): Promise<void> {\n    return;\n  }\n\n}\n"]}